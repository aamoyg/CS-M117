# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Corey Quon
Student ID: 803786588
Email: corey.quon@ucla.edu

# Partner 2 (if you're working in a team)
Name: Jonathan Nguy
Student ID: 603799761
Email: jpnguy@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We used pthreads to download and upload files in parallel.  The downloads were performed in parallel first, and then the uploads in parallel.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
We changed strcpy() to strncpy() when we were copying a filename from the task buffer into memory.  This is because strcpy() assumes that the c-string is null terminated, but by using strncpy we could limit the copy to FILENAMESIZ bytes.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
We fixed the problem of working directory uploads.  This is when a peer requests a file outside of our current working directory.  We checked the filenames and made sure there were no "/", which lead to different directories.
We also fixed the task buffer overflow that was a problem with the popular tracker.  We did this by increasing the size of the buffer (TASKBUFSIZ).
We tried to implement a timeout, but it does not appear to work correctly.

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
Infinite Loop:
This was a simpler evil attack that we did that basically printed the screen with 1's. This attack basically keeps writing to the buffer and writing from the buffer. Since this attack never stopped, the other peer's system would probably crash. 

Buffer Overflow:
This evil attack creates a full buffer without error checking. Because of this, we would be able to overflow that buffer and run malicious code. This type of attack is very common among systems and can cause many problems.

# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
